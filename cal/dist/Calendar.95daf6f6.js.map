{"version":3,"sources":["Components/Calendar/Calendar.js"],"names":["Calendar","props","error","current","Date","nextMonth","chosen","currentMonth","renderError","prevMonth","dateFormat","days","startDate","i","push","renderDays","day","selectedDate","init","initTime","monthStart","monthEnd","endDate","initSize","Object","keys","length","rows","theEnd","theStart","formattedDate","cloneDay","currDay","Number","theTimes","dayIndex","concat","time","e","dateClick","map","item","index","toString","renderCells"],"mappings":"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","file":"Calendar.95daf6f6.js","sourceRoot":"../src","sourcesContent":["import React from \"react\";\r\nimport {\r\n  format,\r\n  startOfWeek,\r\n  addDays,\r\n  startOfMonth,\r\n  endOfWeek,\r\n  endOfMonth,\r\n  isSameMonth,\r\n  isSameDay,\r\n  toDate,\r\n  addMonths,\r\n} from \"date-fns\";\r\nimport \"./Calendar.css\";\r\n\r\nconst Calendar = (props) => {\r\n\r\n  const renderHeader = () => {\r\n    const dateFormat = \"MMMM yyyy\";\r\n\r\n    return (\r\n      <div className=\"header row flex-middle\">\r\n        <div className=\"col col-start\">\r\n          <div className=\"icon\" onClick={props.prevMonth}>\r\n            chevron_left\r\n          </div>\r\n        </div>\r\n        <div className=\"col col-center\">\r\n          <span>{format(props.currentMonth, dateFormat)}</span>\r\n        </div>\r\n        <div className=\"col col-end\" onClick={props.nextMonth}>\r\n          <div className=\"icon\">chevron_right</div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const renderDays = () => {\r\n    const dateFormat = \"EEEE\";\r\n    const days = [];\r\n\r\n    let startDate = startOfWeek(props.currentMonth);\r\n\r\n    for (let i = 0; i < 7; i++) {\r\n      days.push(\r\n        <div className=\"col col-center\" key={i}>\r\n          {format(addDays(startDate, i), dateFormat)}\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return <div className=\"days row\">{days}</div>;\r\n  }\r\n\r\n  const renderCells = () => {\r\n    const currentMonth = props.currentMonth;\r\n    const selectedDate = props.selectedDate;\r\n    const init = props.initTime;\r\n    const monthStart = startOfMonth(currentMonth);\r\n    const monthEnd = endOfMonth(monthStart);\r\n    const startDate = startOfWeek(monthStart);\r\n    const endDate = endOfWeek(monthEnd);\r\n    const initSize = Object.keys(init).length;\r\n\r\n    const dateFormat = \"d\";\r\n    const rows = [];\r\n\r\n    let days = [];\r\n    let day = startDate;\r\n    let theEnd = monthEnd;\r\n    let theStart = monthStart;\r\n    let formattedDate = \"\";\r\n\r\n    while (day <= endDate) {\r\n      for (let i = 0; i < 7; i++) {\r\n        formattedDate = format(day, dateFormat);\r\n\r\n        const cloneDay = day;\r\n        const currDay = Number(formattedDate);\r\n\r\n        let timeAvail = [];\r\n        let theTimes = [];\r\n        if (day >= theStart && day <= theEnd) {\r\n          const dayIndex = currDay - 1;\r\n\r\n          if (dayIndex < initSize) {\r\n            theTimes = timeAvail.concat(init[dayIndex].time);\r\n          }\r\n        }\r\n\r\n        days.push(\r\n          <div\r\n            className={`col cell ${\r\n              !isSameMonth(day, monthStart)\r\n                ? \"disabled\"\r\n                : isSameDay(day, selectedDate)\r\n                  ? \"selected\"\r\n                  : \"\"\r\n              }`}\r\n            key={day}\r\n            onClick={(e) => props.dateClick(toDate(cloneDay))}\r\n          >\r\n            <span className=\"number\">{formattedDate}</span>\r\n            <span className=\"bg\">{formattedDate}</span>\r\n            <ul className=\"showTime\">{theTimes.map((item, index) => (<li key={index.toString()}>{item}</li>))}</ul>\r\n          </div>\r\n        );\r\n        day = addDays(day, 1);\r\n      }\r\n      rows.push(\r\n        <div className=\"row\" key={day}>\r\n          {days}\r\n        </div>\r\n      );\r\n      days = [];\r\n    }\r\n    return <div className=\"body\">{rows}</div>;\r\n  }\r\n\r\n  const renderError = () => {\r\n    if (props.error) {\r\n      let current = new Date();\r\n      let nextMonth = addMonths(current, 1);\r\n      let chosen = props.currentMonth;\r\n      if (isSameMonth(chosen, current) || isSameMonth(chosen, nextMonth)) {\r\n        return (\r\n          <div className=\"errBox\"><h1>No Times Available. Please choose another day.</h1></div>\r\n        )\r\n      }\r\n      return (\r\n        <div className=\"errBox\">Only the first two months have availability.</div>\r\n      )\r\n    }\r\n    else {\r\n      return (\r\n        <div className=\"helpBox\">Please select a date with available times to demo this calendar application.</div>\r\n      )\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"heightControl\">\r\n      <header>\r\n        <div id=\"logo\">\r\n          <span className=\"icon\">date_range</span>\r\n          <span>\r\n            My<b>Calendar</b>\r\n            {renderError()}\r\n          </span>\r\n        </div>\r\n      </header>\r\n      <main>\r\n        <div className=\"calendar\">\r\n          {renderHeader()}\r\n          {renderDays()}\r\n          {renderCells()}\r\n        </div>\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Calendar;\r\n"]}